Inventory Logic Flow (Updated, 10/26/2025)

1. Data Fetching:
    - useFetchData("items") loads inventory data from the API.
    - When data loads, Redux is updated via dispatch(setInventory(data.items)).

2. Inventory Sync:
    - When Redux inventory changes, local quantities state is initialized or updated to match the inventory.
    - useEffect keeps local quantities in sync with Redux inventory.

3. Quantity Editing:
    - User edits a quantity in an input field.
    - onChange updates the corresponding value in the local quantities state (keyed by location ID).

4. Saving Changes:
    - User clicks Save:
        * dispatch(updateItemQuantity({...})) updates Redux state for instant UI feedback.
        * updateData(...) updates the backend with the new quantity.
        * Optionally, re-fetch inventory from the backend and update Redux to sync UI.

5. Undo Changes:
    - User clicks Undo:
        * Sends a POST request to the backend to revert the change for a specific location.
        * Re-fetches inventory and updates Redux state.

---------------------------------------------------------

React Local State (useState)

1. quantities:
    - Stores the quantity for each location, keyed by location ID.
    - Controls the value of each input field for location quantities.

----------------------------------------------------------

Redux Slice (Global State)

1. inventory:
    - Gets the inventory array from the Redux store.

2. dispatch:
    - Used to update Redux state:
        * dispatch(setInventory(data.items)) - sets the inventory from API data.
        * dispatch(updateItemQuantity({...})) - updates the quantity for a specific item/location.

-----------------------------------------------------------

Custom Hooks

1. useFetchData:
    - Fetches inventory data from the API using "items".
    - Returns data, loading, and error states.

2. useUpdateInventoryData:
    - Provides a function to update inventory data in the backend.

------------------------------------------------------------

Helper Functions

1. useEffect (inventory sync):
    - Syncs local quantities state with Redux inventory whenever inventory changes.

2. useEffect (API data to Redux):
    - Updates Redux inventory when new API data is loaded.

3. fetchInventory:
    - Fetches the latest inventory from the backend and updates Redux.

-------------------------------------------------------------

Components

1. InventoryPage:
    - Main page component for inventory management.
    - Renders a list of items and their locations.
    - For each location, renders:
        * An input field for quantity (controlled by quantities state).
        * A Save button to update Redux and backend.
        * An Undo button to revert changes.

2. NavBar:
    - Navigation bar for the inventory page.

-------------------------------------------------------------

Routing

- `/inventory`: Shows the inventory list and allows editing quantities.

-------------------------------------------------------------

Error and Loading States

- Displays loading indicator while fetching data.
- Displays error message if data fetch fails.

-------------------------------------------------------------

Summary

- Inventory data is fetched from the backend and stored in Redux.
- Local state (quantities) is synced with Redux inventory for input control.
- Changes are saved to both Redux and backend, with UI re-synced after each update.
- Undo functionality allows reverting changes for individual locations.